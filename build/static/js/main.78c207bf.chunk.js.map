{"version":3,"sources":["assets/Profile.jpg","assets/SaltyRoguePhoneCalls.png","assets/TylersTutors.png","components/Tyler.js","components/NavBar.js","components/Index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","pdfjsLib","window","pdfDoc","pageNum","pageIsRendering","pageNumIsPending","canvas","document","querySelector","ctx","getContext","renderPage","num","getPage","then","page","viewport","getViewport","scale","height","width","renderCntx","canvasContext","render","promise","textContent","queueRenderPage","getDocument","pdfDoc_","numPages","catch","err","div","createElement","className","appendChild","createTextNode","message","insertBefore","style","display","addEventListener","NavBar","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","inherits","createClass","key","value","setState","react_default","a","Navbar","color","light","expand","NavbarBrand","href","src","logo","alt","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","Component","Index","onDocumentLoadSuccess","modal","prevState","salty","tutor","Button","Modal","toogle","ModalBody","ModalFooter","App","components_NavBar","components_Index","align","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78c207bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Profile.0b6dee58.jpg\";","module.exports = __webpack_public_path__ + \"static/media/SaltyRoguePhoneCalls.a98ab6aa.png\";","module.exports = __webpack_public_path__ + \"static/media/TylersTutors.f0b9da22.png\";","const url=\"../assets/T.OlsenMay2.pdf\";\n\n// Loaded via <script> tag, create shortcut to access PDF.js exports.\nvar pdfjsLib = window['pdfjs-dist/build/pdf'];\n\nlet pdfDoc = null, \n  pageNum = 1,\n  pageIsRendering = false,\n  pageNumIsPending = null;\n\nconst scale = 1,\n  canvas = document.querySelector('#pdf-render'),\n  ctx = canvas.getContext('2d');\n\n// Render the page info\nconst renderPage = num => {\n  pageIsRendering = true;\n  \n  // Get page\n  pdfDoc.getPage(num).then(page => {\n    // Set scale\n    const viewport = page.getViewport({ scale })\n    canvas.height = viewport.height;\n    canvas.width = viewport.width;\n\n    const renderCntx = {\n      canvasContext: ctx,\n      viewport\n    }\n\n    page.render(renderCntx).promise.then(() => {\n      pageIsRendering = false;\n\n      if(pageNumIsPending !== null){\n        renderPage(pageNumIsPending); \n        pageNumIsPending = null;\n      }\n    });\n\n    //Output current page\n    document.querySelector('#page-num').textContent=num;\n\n  })\n}\n\n// Check for pages rendering\nconst queueRenderPage = num => {\n  if(pageIsRendering) {\n    pageNumIsPending = num;\n  } else{\n    renderPage(num)\n  }\n}\n\n// Show previous page\nconst showPrevPage = () => {\n  if(pageNum <= 1){\n    return;\n  } \n  pageNum--;\n  queueRenderPage(pageNum);\n}\n\n// Show next page\nconst showNextPage = () => {\n  if(pageNum >= pdfDoc.numPages){\n    return;\n  } \n  pageNum++;\n  queueRenderPage(pageNum);\n}\n\n// Get document\npdfjsLib\n  .getDocument(url)\n  .promise.then(pdfDoc_ => {\n    pdfDoc = pdfDoc_;\n\n  document.querySelector('#page-count').textContent = pdfDoc.numPages;\n\n  renderPage(pageNum);\n})\n  .catch(err => {\n    // Display eror\n    const div = document.createElement('div');\n    div.className = 'error';\n    div.appendChild(document.createTextNode(err.message));\n    document.querySelector('body').insertBefore(div, canvas);\n    // remove top bar\n    document.querySelector('.top-bar').style.display = 'none';\n  });\n\n// Button events\ndocument.querySelector('#prev-page').addEventListener('click', showPrevPage);\ndocument.querySelector('#next-page').addEventListener('click', showNextPage);","import React, { Component } from 'react'\nimport { \n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem} from \"reactstrap\";\nimport logo from '../assets/Profile.jpg'\n\nexport class NavBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <div>\n            <NavbarBrand href=\"/\">Tyler Olsen</NavbarBrand>            \n          </div>\n          <img src={logo} alt={'../assets/Finn.jpg'} width=\"8%\" /> \n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"https://www.linkedin.com/in/tylerolsen14/\">LinkedIn</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/TylerOlsen14\">GitHub</NavLink>\n              </NavItem>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Examples: \n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    Tyler's Tutors\n                  </DropdownItem>\n                  <DropdownItem>\n                    Salty Rogue Real Estate\n                  </DropdownItem>\n                  {/* <DropdownItem divider />\n                  <DropdownItem>\n                    Reset\n                  </DropdownItem> */}\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n}\n\nexport default NavBar\n","import React, { Component } from \"react\";\nimport { Modal, Button, ModalBody, ModalFooter } from \"reactstrap\";\n// import resume from \"../assets/T.OlsenMay2.pdf\";\nimport resume from \"./Tyler.js\";\nimport salty from \"../assets/SaltyRoguePhoneCalls.png\";\nimport tutor from \"../assets/TylersTutors.png\";\nimport \"./index.css\";\n\nexport class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  state= {\n    numPages: null,\n  }\n  \n  onDocumentLoadSuccess = (document) => {\n    const { numPages } = document;\n    this.setState({\n      numPages,\n    });\n  };\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"pimg1\">\n          <div className=\"ptext\">\n            <span className=\"border\">Tyler Olsen</span>\n          </div>\n        </div>\n\n        <section className=\"section section-light\">\n          <h2>Salty Rogue Real Estate</h2>\n          <p>\n            A simple app meant to be used to make record of phone calls. This was made for a local real estate firm who makes a lot of phone calls and speaks with a lot of people. This is a simple way for them to keep track of who they talk to and what the conversation was about. \n          </p>\n        </section>\n\n        <div className=\"pimg2 trans\">\n          <div className=\"ptextScreenshot\">\n            <div>\n              {/* <span className=\"border\">Image two text</span> */}\n              <img src={salty} alt=\"MERN\" className=\"appScreenshot\" />\n            </div>\n          </div>\n        </div>\n\n        <section className=\"section section-dark\">\n          <h2>Tyler's Tutors</h2>\n          <p>\n            Another simple app, this is meant ot track and re-call data for an imaginary tutoring service. We can track the teachers and the students in separate locations and we can update information as it changes. This uses Vue as a framework and Firebase/Firestore as a database.\n          </p>\n        </section>\n\n        <div className=\"pimg3 trans\">\n          <div className=\"ptextScreenshot\">\n            <div>\n              <img\n                src={tutor}\n                alt=\"App written in Vue using Firebase/Firestore\"\n                className=\"appScreenshot\"\n              />\n            </div>\n            {/* <span className=\"border\">\n              Image three text\n            </span> */}\n          </div>\n        </div>\n\n        <section className=\"section section-dark\">\n          <h2>Resume</h2>\n          <p>I'm looking for work as a web developer. I moving into the tech field from education. I worked as a writing tutor at the end of my undergraduate studies, held a teaching assistant position during grad school, and most recently worked, briefly, as an 8th grade English teacher.</p>\n          <p>Though I may be new a young in the web development field, I learn very quickly. I am a dedicated worker who puts in the work needed to acheive mastery.</p>\n        </section>\n\n        <div className=\"pimg4 trans\">\n          <div className=\"ptext\">\n            <span className=\"border\">\n              <Button color=\"danger\" onClick={this.toggle}>Resume</Button>\n              <Modal isOpen={this.state.modal} toggle={this.toogle}>\n                <ModalBody>\n                  {/* <img src={resume} alt=\"?\" /> */}\n                  \n                </ModalBody>\n                <ModalFooter>\n                  <Button color=\"secondary\" onClick={this.toggle}>X</Button>\n                </ModalFooter>\n              </Modal>\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar'\nimport bootstrap from 'bootstrap'\nimport reactstrap from 'reactstrap'\nimport Index from './components/Index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Index />\n\n      <div className=\"footer\">\n        <h5 align=\"center\">Captain Finn Web Designs</h5>\n        <p>Contact: </p> \n      </div>\n      <script src=\"//mozilla.github.io/pdf.js/build/pdf.js\"></script>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}